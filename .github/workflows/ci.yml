name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
      ST_CACHE: ${{ github.workspace }}/.cache/st
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Clear all caches
        run: |
          find . -name "*.pyc" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} +
          python -c "import sys; print('Python executable:', sys.executable)"
          python -c "import sys; print('Python path:', sys.path)"
      - name: Verify script content
        run: |
          echo "=== Script last 20 lines ==="
          tail -20 scripts/ai_issue_codegen.py
          echo "=== Checking for subprocess usage ==="
          grep -n "subprocess" scripts/ai_issue_codegen.py || echo "No subprocess found (good!)"
          echo "=== Checking for apply_patch calls ==="
          grep -n "apply_patch" scripts/ai_issue_codegen.py || echo "No apply_patch calls found (good!)"
      #––– Cache pip wheels –––#
      - name: Cache pip wheels
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: >
            pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      #––– Cache HuggingFace models –––#
      - name: Cache HuggingFace models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: >
            hf-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            hf-${{ runner.os }}-
      - run: pip install -v -r requirements.txt
      - name: Sanity-check deps
        run: |
          test -f requirements.txt || { echo "❌ requirements.txt not found"; exit 1; }
          python - <<'PY'
          import importlib, sys
          for pkg in ("matplotlib", "pytest"):
              try:
                  m = importlib.import_module(pkg)
                  print(f"[OK] {pkg} {m.__version__}")
              except ModuleNotFoundError:
                  print(f"❌  {pkg} NOT INSTALLED")
                  sys.exit(1)
          PY
      - run: python -c "import matplotlib"
      - name: Static type check (mypy)
        run: mypy .
      - run: pytest -q
